@page "/"
@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Models.JSON;
@using AIStoryBuilders.Services;
@using AIStoryBuilders.Components.Pages.Controls;
@using AIStoryBuilders.Components.Pages.Controls.Story;
@using Newtonsoft.Json;
@using System.Text
@using static AIStoryBuilders.AI.OrchestratorMethods
@using static AIStoryBuilders.Services.AIStoryBuildersService;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
@inject SettingsService SettingsService
@implements IDisposable
<PageTitle>AI Story Builders</PageTitle>
<RadzenMenu>
    @if (ApiKey.StartsWith("sk-"))
    {
        <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home"></RadzenMenuItem>
        <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment"></RadzenMenuItem>
        <RadzenMenuItem Click="OnUtilityClicked" Text="Utility" Icon="aspect_ratio"></RadzenMenuItem>
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
    else
    {
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
</RadzenMenu>
<br />
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
@if (HomeVisible)
{
    <RadzenButton Click=@(() => NewStory()) Text="New Story" Icon="add" ButtonStyle="ButtonStyle.Success" />
    <span>&nbsp; &nbsp;</span>
    <RadzenButton Click=@(() => ImportStory()) Text="Import Story" Icon="publish" ButtonStyle="ButtonStyle.Light" />
    <br />
    <br />
    <div style="height:500px">
        <RadzenDataList AllowVirtualization=false Style="height:100%;overflow:auto;"
                        WrapItems=true AllowPaging=false
                        Data="@colStorys" TItem="Story">
            <Template Context="story">
                <RadzenCard Style="width: 100%; padding: 1;">
                    <RadzenRow Gap="0">
                        <RadzenButton Text="Select" Click=@(() => EditStory(story))
                                      ButtonStyle="ButtonStyle.Light" Style="width: 150px;height: 20px" />
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        <RadzenText TextStyle="TextStyle.DisplayH5"
                                    class="rz-color-secondary">@(story.Title)</RadzenText>&nbsp;&nbsp;
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    </div>
}
@if (SettingsVisible)
{
    <Settings SettingsChanged="HandleSettingsChanged"></Settings>
}
@if (LogsVisible)
{
    <Logs></Logs>
}
@if (UtilityVisible)
{
    <Utility></Utility>
}
@code {
    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;
    LogService LogService;

    List<Story> colStorys = new List<Story>();
    Story objStory = new Story();

    string Organization = "";
    string ApiKey = "";

    bool InProgress = false;
    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool LogsVisible = false;
    bool UtilityVisible = false;

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
            LogService = (LogService)ScopedServices.GetService(typeof(LogService));

            AIStoryBuildersService.TextEvent += AIStoryBuildersService_TextEvent;
            OrchestratorMethods.ReadTextEvent += OrchestratorMethods_ReadTextEvent;

            SettingsService.LoadSettings();
            Organization = SettingsService.Organization;
            ApiKey = SettingsService.ApiKey;

            if ((ApiKey == "") || (!ApiKey.StartsWith("sk-")))
            {
                // Switch to the Settings page
                HomeVisible = false;
                SettingsVisible = true;
                LogsVisible = false;
            }
            else
            {
                // Get the Storys from the database
                colStorys = AIStoryBuildersService.GetStorys();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            LogService.WriteToLog(ex.Message);
        }
    }

    private async Task NewStory()
    {
        try
        {
            var NewStoryResult = await dialogService.OpenAsync<AIStoryBuilders.Components.Pages.Controls.Story.NewStory>($"New Story",
                null,
                new DialogOptions() { Width = "650px" });

            if (NewStoryResult != null)
            {
                objStory = (Story)NewStoryResult;

                if (objStory != null)
                {
                    HomeVisible = false;
                    InProgress = true;
                    StateHasChanged();

                    // Add SystemMessage to the Story
                    objStory.Theme = "You are a software program that creates prose for novels. Use the following style sheet: Foreshadowing: Do not have any foreshadowing as to events that have not yet happened. Third-person Limited: The narrative is primarily from the limited perspective of specific characters, offering insights into their thoughts and feelings. The point of view may switch between characters but stays closely aligned with one at a time.";

                    // Save Story to the database
                    await AIStoryBuildersService.AddStory(objStory, objStory.ModelId);

                    HomeVisible = true;
                    InProgress = false;
                    StateHasChanged();

                    var parms = new Dictionary<string, object>();
                    objStory.Id = 0; // So we know it is no longer new;
                    parms.Add("objStory", objStory);

                    var EditStoryResult = await dialogService.OpenAsync<StoryControl>($"{objStory.Title}", parms,
                    new DialogOptions() { Height = "650px", Width = "950px" });
                }

                colStorys = AIStoryBuildersService.GetStorys();

                StateHasChanged();

                HomeVisible = true;
                InProgress = false;
            }
        }
        catch (Exception ex)
        {
            HomeVisible = true;
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            LogService.WriteToLog(ex.Message);
        }
    }

    private async Task ImportStory()
    {
        try
        {
            var result = await FilePicker.PickAsync(new PickOptions
                {
                    FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
                {
                    { DevicePlatform.iOS, new[] { "public.content" } },
                    { DevicePlatform.Android, new[] { "application/*" } },
                    { DevicePlatform.WinUI, new[] { ".stybld" } }, })
                });

            if (result != null)
            {
                byte[] stybldFileBytes = null;

                // Open a stream for the selected file
                using (var stream = await result.OpenReadAsync())
                {
                    // Create a memory stream to copy the file stream
                    using (var memoryStream = new MemoryStream())
                    {
                        // Copy the file stream to the memory stream
                        await stream.CopyToAsync(memoryStream);

                        // Return the byte array
                        stybldFileBytes = memoryStream.ToArray();
                    }
                }

                string ImportResult = AIStoryBuildersService.ImportProject(stybldFileBytes);

                if (ImportResult != "")
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Import Result",
                            Detail = ImportResult,
                            Duration = 4000
                        });
                }

                colStorys = AIStoryBuildersService.GetStorys();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            HomeVisible = true;
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            LogService.WriteToLog(ex.Message);
        }
    }

    private async Task EditStory(Story paramStory)
    {
        try
        {
            if (paramStory.Id == -1)
            {
                // It is a New Story and needs processing
                // Show the Progress bar
                InProgress = true;
            }

            var parms = new Dictionary<string, object>();
            parms.Add("objStory", paramStory);

            var EditStoryResult = await dialogService.OpenAsync<StoryControl>($"{paramStory.Title}", parms,
            new DialogOptions() { Height = "720px", Width = "950px" });

            colStorys = AIStoryBuildersService.GetStorys();

            StateHasChanged();

            InProgress = false;
        }
        catch (Exception ex)
        {
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            LogService.WriteToLog(ex.Message);
        }
    }

    void OnHomeClicked(MenuItemEventArgs args)
    {
        HomeVisible = true;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = true;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = true;
    }

    void OnUtilityClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = true;
        LogsVisible = false;
    }

    // Events

    private void OrchestratorMethods_ReadTextEvent(object sender, EventArgs e)
    {
        ReadTextEventArgs ReadTextEventArguments = (ReadTextEventArgs)e;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "",
                Detail = ReadTextEventArguments.Message,
                Duration = (ReadTextEventArguments.DisplayLength * 1000)
            });
    }

    private void AIStoryBuildersService_TextEvent(object sender, EventArgs e)
    {
        TextEventArgs TextEventArguments = (TextEventArgs)e;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "",
                Detail = TextEventArguments.Message,
                Duration = (TextEventArguments.DisplayLength * 1000)
            });
    }

    private void HandleSettingsChanged()
    {
        SettingsService.LoadSettings();
        Organization = SettingsService.Organization;
        ApiKey = SettingsService.ApiKey;

        // If there is a key show the Home page
        if (ApiKey.StartsWith("sk-"))
        {
            HomeVisible = true;
            SettingsVisible = false;
            UtilityVisible = false;
            LogsVisible = false;
        }
    }

    public void Dispose()
    {
        OrchestratorMethods.ReadTextEvent -= OrchestratorMethods_ReadTextEvent;
        AIStoryBuildersService.TextEvent -= AIStoryBuildersService_TextEvent;
    }
}