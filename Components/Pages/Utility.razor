@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Services;
@using Newtonsoft.Json;
@using OpenAI;
@using CommunityToolkit.Maui.Storage
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject OrchestratorMethods OrchestratorMethods

<h2>Utility</h2>
<div class="row">
    <div class="col">
        <RadzenTabs TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Create JasonL File">
                    <p>Use this page to create JasonL file.</p>
                    <div class="row">
                        <div class="col">
                            <RadzenButton Text="Download Template" ButtonStyle="ButtonStyle.Primary"
                                          Click="DownloadTemplate"
                                          Style="margin-bottom: 10px; width: 250px" />&nbsp;&nbsp;
                        </div>
                    </div>
                    <div class="row">
                        @if (@InProgress)
                        {
                            <div class="rz-m-10">
                                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                            </div>
                        }
                        else
                        {
                        <div class="col">
                            <RadzenButton Click=@(() => CreateJasonLFile()) Text="Create JasonL File" Icon="publish" ButtonStyle="ButtonStyle.Light" />
                        </div>
                        }
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
</div>

@code {
    AIStoryBuildersService AIStoryBuildersService;
    LogService LogService;
    bool InProgress = false;

    protected override void OnInitialized()
    {
        AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
    }

    async Task DownloadTemplate()
    {
        using var stream = await FileSystem.OpenAppPackageFileAsync("FineTunedTemplate.xls");

        var fileSaverResult = await FileSaver.Default.SaveAsync("FineTunedTemplate.xls", stream);

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Saved",
                Detail = $"The file was saved successfully.",
                Duration = 4000
            });
    }

    private async Task CreateJasonLFile()
    {
        try
        {
            var result = await FilePicker.PickAsync(new PickOptions
                {
                    FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
                {
                    { DevicePlatform.iOS, new[] { "public.content" } },
                    { DevicePlatform.Android, new[] { "application/*" } },
                    { DevicePlatform.WinUI, new[] { ".xls" } }, })
                });

            if (result != null)
            {
                byte[] stybldFileBytes = null;

                // Open a stream for the selected file
                using (var stream = await result.OpenReadAsync())
                {
                    // Create a memory stream to copy the file stream
                    using (var memoryStream = new MemoryStream())
                    {
                        // Copy the file stream to the memory stream
                        await stream.CopyToAsync(memoryStream);

                        // Return the byte array
                        stybldFileBytes = memoryStream.ToArray();
                    }
                }

                // string ImportResult = AIStoryBuildersService.ImportProject(stybldFileBytes);

                // if (ImportResult != "")
                // {
                //     NotificationService.Notify(new NotificationMessage
                //         {
                //             Severity = NotificationSeverity.Info,
                //             Summary = "Import Result",
                //             Detail = ImportResult,
                //             Duration = 4000
                //         });
                // }

                //colStorys = AIStoryBuildersService.GetStorys();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            LogService.WriteToLog(ex.Message);
        }
    }
}