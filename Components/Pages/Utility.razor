@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Services;
@using ExcelDataReader
@using Newtonsoft.Json;
@using OpenAI;
@using CommunityToolkit.Maui.Storage
@using OpenAI.Chat
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject OrchestratorMethods OrchestratorMethods

<h2>Utility</h2>
<div class="row">
    <div class="col">
        <RadzenTabs TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Create JasonL File">
                    <p>Use this page to upload an Excel file and create a JsonL file to use for fine tuning.</p>
                    <div class="row">
                        <div class="col">
                            <RadzenButton Text="Download Template" ButtonStyle="ButtonStyle.Primary"
                                          Click="DownloadTemplate"
                                          Style="margin-bottom: 10px; width: 250px" />&nbsp;&nbsp;
                        </div>
                    </div>
                    <br/>
                    <div class="row">
                        @if (@InProgress)
                        {
                            <div class="rz-m-10">
                                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                            </div>
                        }
                        else
                        {
                            <div class="col">
                                <RadzenButton Click=@(() => CreateJasonLFile()) Text="Upload Excel file and create JsonL file" Icon="publish" ButtonStyle="ButtonStyle.Success" />
                            </div>
                        }
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
</div>

@code {
    AIStoryBuildersService AIStoryBuildersService;
    LogService LogService;
    bool InProgress = false;

    protected override void OnInitialized()
    {
        AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
    }

    async Task DownloadTemplate()
    {
        using var stream = await FileSystem.OpenAppPackageFileAsync("FineTunedTemplate.xls");

        var fileSaverResult = await FileSaver.Default.SaveAsync("FineTunedTemplate.xls", stream);

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Saved",
                Detail = $"The file was saved successfully.",
                Duration = 4000
            });
    }

    private async Task CreateJasonLFile()
    {
        try
        {
            var result = await FilePicker.PickAsync(new PickOptions
                {
                    FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
                {
                    { DevicePlatform.iOS, new[] { "public.content" } },
                    { DevicePlatform.Android, new[] { "application/*" } },
                    { DevicePlatform.WinUI, new[] { ".xls" } }, })
                });

            if (result != null)
            {
                byte[] TemplateFileBytes = null;
                var conversations = new List<Conversation>();

                // Open a stream for the selected file
                using (var stream = await result.OpenReadAsync())
                {
                    // Create a memory stream to copy the file stream
                    using (var memoryStream = new MemoryStream())
                    {
                        // Copy the file stream to the memory stream
                        await stream.CopyToAsync(memoryStream);

                        // Return the byte array
                        TemplateFileBytes = memoryStream.ToArray();
                    }

                    using (var reader = ExcelReaderFactory.CreateReader(stream))
                    {
                        do
                        {
                            while (reader.Read())
                            {
                                conversations.Add(new Conversation(new List<Message>()
                                {
                                    new Message(Role.System, reader.GetString(0)),
                                    new Message(Role.User, reader.GetString(1)),
                                    new Message(Role.Assistant, reader.GetString(2))
                                }));
                            }
                        }
                        while (reader.NextResult());
                    }
                }

                var fileContents = conversations.Select(conversation => conversation.ToString());

                // Convert fileContents to a stream
                using var OutputStream = new MemoryStream();
                using var writer = new StreamWriter(OutputStream);

                foreach (var line in fileContents)
                {
                    await writer.WriteLineAsync(line);
                }

                await writer.FlushAsync();
                OutputStream.Position = 0;

                var fileSaverResult = await FileSaver.Default.SaveAsync("FineTunedJason.jsonL", OutputStream);

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Saved",
                        Detail = $"The file was saved successfully.",
                        Duration = 4000
                    });

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            LogService.WriteToLog(ex.Message);
        }
    }
}